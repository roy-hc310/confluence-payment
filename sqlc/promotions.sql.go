// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: promotions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductVariants = `-- name: CreateProductVariants :exec
INSERT INTO product_variants (product_id, sku, name, discounted_price, discounted_percentage, stock_limit, is_active)
VALUES (
    unnest($1::integer[]),
    unnest($2::varchar[]),
    unnest($3::varchar[]),
    unnest($4::float[]),
    unnest($5::float[]),
    unnest($6::integer[]),
    unnest($7::boolean[])
)
`

type CreateProductVariantsParams struct {
	Column1 []int32
	Column2 []string
	Column3 []string
	Column4 []float64
	Column5 []float64
	Column6 []int32
	Column7 []bool
}

func (q *Queries) CreateProductVariants(ctx context.Context, arg CreateProductVariantsParams) error {
	_, err := q.db.Exec(ctx, createProductVariants,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
	)
	return err
}

const createProducts = `-- name: CreateProducts :exec
INSERT INTO products (promotion_id, sku, name, purchase_limit)
VALUES (
    unnest($1::integer[]),
    unnest($2::varchar[]),
    unnest($3::varchar[]),
    unnest($4::integer[])
)
RETURNING id
`

type CreateProductsParams struct {
	Column1 []int32
	Column2 []string
	Column3 []string
	Column4 []int32
}

func (q *Queries) CreateProducts(ctx context.Context, arg CreateProductsParams) error {
	_, err := q.db.Exec(ctx, createProducts,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const createPromotion = `-- name: CreatePromotion :one







INSERT INTO promotions (name, promotion_type, code, start_time, end_time, shop_id, usage_quantity, usage_limit_per_user)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreatePromotionParams struct {
	Name              string
	PromotionType     string
	Code              string
	StartTime         pgtype.Timestamp
	EndTime           pgtype.Timestamp
	ShopID            string
	UsageQuantity     int32
	UsageLimitPerUser int32
}

// -- name: CreatePlatform :one
// insert into platforms (
//
//	name
//
// ) values (
//
//	$1
//
// )
// returning *;
// -- name: ListPlatforms :many
// select * from platforms
// where deleted_at is null and id < $1
// order by id desc
// limit $2;
// -- name: DetailPlatform :one
// select * from platforms
// where deleted_at is null and id = $1;
// -- name: UpdatePlatform :one
// update platforms
// set name = $2
// where id = $1
// returning *;
// insert into promotions (
// )
func (q *Queries) CreatePromotion(ctx context.Context, arg CreatePromotionParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPromotion,
		arg.Name,
		arg.PromotionType,
		arg.Code,
		arg.StartTime,
		arg.EndTime,
		arg.ShopID,
		arg.UsageQuantity,
		arg.UsageLimitPerUser,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
